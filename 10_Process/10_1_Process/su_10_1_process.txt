시분할 처리
    연결만 되면 서비스를 하기 // 대신 대기시간이 길다
    서비스를 조금 느리게 처리 // 대신 대기시간이 짧다
        -> 보통은 후자
평균적인 만족도를 높이기

다중접속 서버의 구현 모델 및 구현 방법
    멀티프로세스 기반 서버 // 다수의 프로세스를 생성, 서비스 제공
    멀티플렉싱 기반 서버 // IO 대상을 묵어서 관리, 서비스 제공
    멀티쓰레딩 기반 서버 // clnt : thread = 1:1, 서비스 제공

멀티 프로세스 기반의 서버는 리눅스 에서만, windows에서의 개념은 아님

Process : 메모리 공간을 차지한 상태에서 실행중인 프로그램

CPU 코어 수만큼 ps 동시 실행이 가능
    -> ps 수가 더 클때는 ps별로 코어에 할당되는 시간이 나뉨

pid는 2부터 할당됨 // 1=init


프로세스 생성 : fork()함수 이용

#include <unistd.h>

pid_t fork(void); // 성공시 pid, 실패시 -1

fork함수 실행시, 복사본을 생성하며
    두 ps모두 fork함수 반환 이후를 실행하게 된다.
        이때, 메모리 영역까지 동일하게 복사됨
        pps의 경우 child.pid
        ps의 경우 0 반환

