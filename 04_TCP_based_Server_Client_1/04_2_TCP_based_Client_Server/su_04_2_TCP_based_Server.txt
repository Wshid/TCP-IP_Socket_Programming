TCP 서버에서의 기본적인 함수 호출 순서
socket() -> bind() -> listen() -> accept() -> read()/write() -> close()

#include<sys/socket.h>
int listen(int sock, int backlog)
    // 서버소켓(sock), 리스닝 소켓이 됨
    // backlog -> 연결요청 대기 큐의 크기를 설정한다.
    
연결 요청 대기 상태
    - 클라이언트가 연결 요청을 했을 때 연결이 수락될 떄까지 연결요청 자체를 대기시킬 수 있는 상태에 있는 것
    - 문지기 역할을 하는 서버 소켓을 하나 만들어두어야 함
    - 서버 소켓과 연결 요청 대기 큐가 완전히 준비되어서 클라이언트의 연결요청을 받아들일 수 있는 상태
    
연결 요청 대기 큐(backlog)
    - 실제로 서버 소켓이 처리를 하기 전에 임시적으로 대기 하는 곳


listen, backlog=15?
    웹서버와 같이 잦은 연결 요청시, 최소 15이상 전달해야함
    보통의 경우에는 실험적 결과에 의존하여 결정함
    

클라이언트의 연결요청 수락
    - serv_sock(서버소켓)은 문지기 역할이므로, 이를 사용해서 값을 받아내려고 하면 안됨
    - 새로운 소켓이 하나 더 필요
    - accept 함수 호출의 결과로 소켓이 하나더 만들어짐

#include<sys/socket.h>
int accept(int sock, struct sockaddr *addr, socklen_t *addrlen);
    sock : serv_sock // 서버 소켓의 fd 전달
    addr : 클라이언트의 주소정보를 담은 변수의 주소값 전달
    addrlen : addr에 전달된 주소의 변수 크기를 바이트 단위로 전달

- 연결 요청 대기 큐에서 대기중인 클라이언트의 연결 요청을 수락하는 기능
- 내부적으로 데이터 입출력에 사용할 소켓을 생성
- 소켓이 자동으로 생성되어, 연결 요청을 한 클라이언트 소켓에 연결까지 진행됨